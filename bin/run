#!/usr/bin/env ruby
Thread.abort_on_exception = true

require "paint"
require "bundler"
Bundler.setup(:default)

require_relative "../lib/lapidar"

puts "Starting experiment…"

runners = [
  Lapidar.runner(port: 9999, neighbors: [
    { host: "localhost", port: 9995 },
    { host: "localhost", port: 9996 },
    { host: "localhost", port: 9997 },
    { host: "localhost", port: 9998 },
  ]),
  Lapidar.runner(port: 9998, neighbors: [{ host: "localhost", port: 9996 }]),
  Lapidar.runner(port: 9997, neighbors: [{ host: "localhost", port: 9997 }]),
  Lapidar.runner(port: 9996, neighbors: [{ host: "localhost", port: 9998 }]),
  Lapidar.runner(port: 9995, neighbors: [{ host: "localhost", port: 9999 }])
]

threads = runners.map do |runner|
  [
    Thread.new { runner.start },
    Thread.new { loop { runner.punch_queue << rand.to_s } }
  ]
end.flatten

logger_thread = Thread.new do
  sleep(1)

  loop do
    system("clear")
    puts(runners.map do |runner|
      "Runner on port #{runner.network_endpoint.port}:\n#{runner.chain.to_colorful_string(5)}"
    end.join("\n"))
    sleep(1)
  end
end

trap "SIGINT" do
  puts "Shutting down…"
  runners.each(&:stop)
  logger_thread.exit
end

threads.each(&:join)
logger_thread.join
